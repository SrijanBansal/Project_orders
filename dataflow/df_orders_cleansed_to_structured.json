{
	"name": "df_orders_cleansed_to_structured",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_order_cleansed",
						"type": "DatasetReference"
					},
					"name": "OrderSourceCleansed"
				},
				{
					"dataset": {
						"referenceName": "ds_order_items_cleansed",
						"type": "DatasetReference"
					},
					"name": "OrderItemsSourceCleansed"
				},
				{
					"dataset": {
						"referenceName": "ds_stores_cleansed",
						"type": "DatasetReference"
					},
					"name": "StoreSourceCleansed"
				},
				{
					"dataset": {
						"referenceName": "ds_product_cleansed",
						"type": "DatasetReference"
					},
					"name": "ProductsSourceCleansed"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_structured_orders_sql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_stores_sql",
						"type": "DatasetReference"
					},
					"name": "StoreSinkStructured"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_products_sql",
						"type": "DatasetReference"
					},
					"name": "ProductSInkStructuted"
				}
			],
			"transformations": [
				{
					"name": "OrdersJoin"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrderSourceCleansed",
				"source(output(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrderItemsSourceCleansed",
				"source(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> StoreSourceCleansed",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ProductsSourceCleansed",
				"OrderSourceCleansed, OrderItemsSourceCleansed join(OrderSourceCleansed@ORDER_ID == OrderItemsSourceCleansed@ORDER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> OrdersJoin",
				"OrdersJoin derive(UPDATED_TIMESTAMP = currentUTC(),",
				"          SUBTOTAL = multiply(UNIT_PRICE,QUANTITY),",
				"          ORDER_ITEM_ID = toInteger(concat(toString(OrderSourceCleansed@ORDER_ID),toString(PRODUCT_ID)))) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          ORDER_ITEM_ID,",
				"          ORDER_ID = OrderSourceCleansed@ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          SUBTOTAL,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"ProductsSourceCleansed derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn2",
				"StoreSourceCleansed derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn3",
				"select1 alterRow(upsertIf(true())) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ITEM_ID as integer,",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as decimal(18,0),",
				"          QUANTITY as integer,",
				"          SUBTOTAL as decimal(18,0),",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ORDER_ITEM_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('key',",
				"          0,",
				"          ORDER_DATE",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as decimal(18,0),",
				"          LONGITUDE as decimal(18,0),",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['TRUNCATE TABLE [ORDERS].[STORES]'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> StoreSinkStructured",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as decimal(18,0),",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['TRUNCATE TABLE [ORDERS].[PRODUCTS]'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> ProductSInkStructuted"
			]
		}
	}
}