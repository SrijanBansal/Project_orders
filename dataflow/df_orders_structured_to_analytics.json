{
	"name": "df_orders_structured_to_analytics",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_orders_structured",
						"type": "DatasetReference"
					},
					"name": "OrderStructured"
				},
				{
					"dataset": {
						"referenceName": "ds_products_structured",
						"type": "DatasetReference"
					},
					"name": "ProductSource"
				},
				{
					"dataset": {
						"referenceName": "ds_stores_structured",
						"type": "DatasetReference"
					},
					"name": "StoresSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_product_orders_analytics",
						"type": "DatasetReference"
					},
					"name": "ProductOrdersMonthly"
				},
				{
					"dataset": {
						"referenceName": "ds_store_orders_analytics",
						"type": "DatasetReference"
					},
					"name": "StoreOrdersMonthly"
				}
			],
			"transformations": [
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          SUBTOTAL as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrderStructured",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ProductSource",
				"source(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> StoresSource",
				"OrderStructured filter(ORDER_STATUS != 'CANCELLED') ~> filter2",
				"filter2 derive(MONTHLY_YEAR = toString(ORDER_DATE, 'MM-yyyy')) ~> derivedColumn1",
				"ProductSource, derivedColumn1 join(ProductSource@PRODUCT_ID == OrderStructured@PRODUCT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"StoresSource, derivedColumn1 join(StoresSource@STORE_ID == OrderStructured@STORE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join1 aggregate(groupBy(PRODUCT_NAME,",
				"          MONTHLY_YEAR,",
				"          ORDER_STATUS),",
				"     TOTAL_AMOUNT = round(sum(SUBTOTAL),2)) ~> aggregate1",
				"join2 aggregate(groupBy(STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ORDER_STATUS,",
				"          MONTHLY_YEAR),",
				"     TOTAL_AMOUNT = round(sum(UNIT_PRICE),2)) ~> aggregate2",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Product_orders_Monthly.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ProductOrdersMonthly",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Store_order_Monthly.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> StoreOrdersMonthly"
			]
		}
	}
}